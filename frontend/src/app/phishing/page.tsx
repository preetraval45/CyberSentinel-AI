'use client'

import { useState, useEffect } from 'react'
import { motion } from 'framer-motion'
import { Mail, AlertTriangle, Shield, Zap } from 'lucide-react'
import Scene3D from '../../components/3d/Scene3D'
import PhishingHook from '../../components/3d/PhishingHook'
import FakeWebsite from '../../components/3d/FakeWebsite'
import CyberButton from '../../components/ui/CyberButton'
import GlassCard from '../../components/ui/GlassCard'
import DraggableInbox from '../../components/phishing/DraggableInbox'
import AttachmentPreview from '../../components/phishing/AttachmentPreview'
import { fadeInUp, staggerContainer } from '../../lib/utils'
import toast, { Toaster } from 'react-hot-toast'
import confetti from 'canvas-confetti'

interface Email {
  id: string
  subject: string
  sender: string
  content: string
  is_clicked: boolean
  is_reported: boolean
  created_at: string
  threat_level: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL'
  urgencyScore: number
  hasAttachment: boolean
  attachmentType?: string
  preview: string
  attachments?: Array<{
    name: string
    type: 'pdf' | 'image' | 'zip' | 'doc'
    size: string
    isMalicious: boolean
    preview?: string
  }>
}

export default function PhishingInbox() {
  const [emails, setEmails] = useState<Email[]>([
    {
      id: '1',
      subject: 'URGENT: Verify Your Account Now!',
      sender: 'security@bank-alert.com',
      content: 'Your account has been compromised. Click here to verify immediately.',
      is_clicked: false,
      is_reported: false,
      created_at: new Date().toISOString(),
      threat_level: 'HIGH',
      urgencyScore: 87,
      hasAttachment: true,
      attachmentType: 'PDF',
      preview: 'Account verification required - suspicious activity detected',
      attachments: [{
        name: 'account_verification.pdf',
        type: 'pdf',
        size: '2.3 MB',
        isMalicious: true,
        preview: 'Contains embedded malicious scripts'
      }]
    },
    {
      id: '2',
      subject: 'You\'ve Won $1,000,000!',
      sender: 'winner@lottery-scam.net',
      content: 'Congratulations! You are our lucky winner. Claim your prize now!',
      is_clicked: true,
      is_reported: false,
      created_at: new Date().toISOString(),
      threat_level: 'CRITICAL',
      urgencyScore: 95,
      hasAttachment: false,
      preview: 'Lottery scam with urgent call-to-action'
    },
    {
      id: '3',
      subject: 'Invoice #INV-2024-001',
      sender: 'billing@company-fake.com',
      content: 'Please find attached invoice for your recent purchase.',
      is_clicked: false,
      is_reported: false,
      created_at: new Date().toISOString(),
      threat_level: 'MEDIUM',
      urgencyScore: 64,
      hasAttachment: true,
      attachmentType: 'ZIP',
      preview: 'Fake invoice with malicious attachment',
      attachments: [{
        name: 'invoice_2024_001.zip',
        type: 'zip',
        size: '1.8 MB',
        isMalicious: true,
        preview: 'Contains ransomware payload'
      }]
    }
  ])
  const [selectedEmail, setSelectedEmail] = useState<Email | null>(emails[0])

  const generateEmail = () => {
    const newEmail: Email = {
      id: Date.now().toString(),
      subject: 'AI-Generated Phishing Attempt',
      sender: 'noreply@fake-service.com',
      content: 'This is a simulated phishing email generated by AI for training purposes.',
      is_clicked: false,
      is_reported: false,
      created_at: new Date().toISOString(),
      threat_level: 'MEDIUM'
    }
    setEmails(prev => [newEmail, ...prev])
  }

  const trackClick = (emailId: string) => {
    setEmails(prev => prev.map(email => 
      email.id === emailId ? { ...email, is_clicked: true } : email
    ))
    toast.error('⚠️ Malicious link clicked! -10 XP', {
      style: {
        background: 'rgba(255, 0, 102, 0.1)',
        color: '#ff0066',
        border: '1px solid rgba(255, 0, 102, 0.3)'
      }
    })
  }

  const reportPhishing = (emailId: string) => {
    setEmails(prev => prev.map(email => 
      email.id === emailId ? { ...email, is_reported: true } : email
    ))
    confetti({
      particleCount: 50,
      spread: 60,
      origin: { y: 0.7 },
      colors: ['#00ffff', '#00ff66']
    })
    toast.success('🎉 Phishing reported! +25 XP earned!', {
      style: {
        background: 'rgba(0, 255, 102, 0.1)',
        color: '#00ff66',
        border: '1px solid rgba(0, 255, 102, 0.3)'
      }
    })
  }

  const getThreatColor = (level: string) => {
    switch (level) {
      case 'CRITICAL': return 'text-cyber-red border-cyber-red'
      case 'HIGH': return 'text-cyber-accent border-cyber-accent'
      case 'MEDIUM': return 'text-cyber-secondary border-cyber-secondary'
      default: return 'text-cyber-green border-cyber-green'
    }
  }

  return (
    <div className="min-h-screen pt-20 pb-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-7xl mx-auto">
        <motion.div
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          className="flex flex-col md:flex-row justify-between items-start md:items-center mb-12 space-y-4 md:space-y-0"
        >
          <div className="flex items-center space-x-6">
            <div>
              <h1 className="text-4xl md:text-6xl font-cyber font-black neon-text mb-2">
                PHISHING LAB
              </h1>
              <p className="text-cyber-primary/70 font-mono">Advanced email threat simulation</p>
            </div>
            <div className="hidden md:block">
              <Scene3D className="w-32 h-32">
                <PhishingHook />
              </Scene3D>
            </div>
          </div>
          
          <CyberButton onClick={generateEmail} variant="primary">
            GENERATE THREAT
          </CyberButton>
        </motion.div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* Draggable Email Inbox */}
          <motion.div
            variants={staggerContainer}
            initial="initial"
            animate="animate"
          >
            <GlassCard>
              <DraggableInbox 
                emails={emails}
                onEmailSelect={setSelectedEmail}
                selectedEmail={selectedEmail}
              />
            </GlassCard>
          </motion.div>

          {/* Email Content */}
          <motion.div
            initial={{ opacity: 0, x: 60 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ delay: 0.3 }}
          >
            <GlassCard className="min-h-[500px]">
              {selectedEmail ? (
                <div>
                  <div className="border-b border-cyber-primary/20 pb-4 mb-6">
                    <div className="flex items-center justify-between mb-3">
                      <h3 className="text-xl font-cyber font-bold text-cyber-primary">
                        {selectedEmail.subject}
                      </h3>
                      <span className={`px-3 py-1 text-xs font-cyber font-bold rounded border ${getThreatColor(selectedEmail.threat_level)}`}>
                        {selectedEmail.threat_level} THREAT
                      </span>
                    </div>
                    <p className="text-cyber-primary/70 font-mono text-sm mb-1">
                      From: {selectedEmail.sender}
                    </p>
                    <p className="text-cyber-primary/50 font-mono text-xs">
                      {new Date(selectedEmail.created_at).toLocaleString()}
                    </p>
                  </div>
                  
                  <div className="mb-8 space-y-6">
                    <div className="glass-dark p-4 rounded-lg border border-cyber-primary/20">
                      <p className="text-cyber-primary/80 leading-relaxed">
                        {selectedEmail.content}
                      </p>
                    </div>
                    
                    {selectedEmail.attachments && selectedEmail.attachments.length > 0 && (
                      <AttachmentPreview attachments={selectedEmail.attachments} />
                    )}
                  </div>

                  <div className="flex flex-col sm:flex-row gap-4">
                    <CyberButton
                      onClick={() => trackClick(selectedEmail.id)}
                      disabled={selectedEmail.is_clicked}
                      variant="danger"
                      className="flex-1"
                    >
                      <Zap className="w-4 h-4 mr-2" />
                      {selectedEmail.is_clicked ? 'LINK CLICKED' : 'CLICK MALICIOUS LINK'}
                    </CyberButton>
                    
                    <CyberButton
                      onClick={() => reportPhishing(selectedEmail.id)}
                      disabled={selectedEmail.is_reported}
                      variant="primary"
                      className="flex-1"
                    >
                      <Shield className="w-4 h-4 mr-2" />
                      {selectedEmail.is_reported ? 'ALREADY REPORTED' : 'REPORT PHISHING'}
                    </CyberButton>
                  </div>
                </div>
              ) : (
                <div className="flex flex-col items-center justify-center h-full text-center">
                  <AlertTriangle className="w-16 h-16 text-cyber-primary/30 mb-4" />
                  <p className="text-cyber-primary/70 font-cyber font-bold">
                    SELECT EMAIL TO ANALYZE
                  </p>
                  <p className="text-cyber-primary/50 text-sm mt-2">
                    Choose a phishing email from the inbox to examine its threat level
                  </p>
                </div>
              )}
            </GlassCard>
          </motion.div>
        </div>
      </div>
      
      <Toaster
        position="top-right"
        toastOptions={{
          style: {
            background: 'rgba(0, 0, 0, 0.8)',
            backdropFilter: 'blur(10px)',
            border: '1px solid rgba(0, 255, 255, 0.3)'
          }
        }}
      />
    </div>
  )
}